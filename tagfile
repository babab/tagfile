#!/usr/bin/env python

'''Search, index and tag your files and find multiple copies'''

import hashlib
import logging
import os
import sys

import colors
import peewee as pw
import pycommand
import yaml

__docformat__ = 'restructuredtext'
__author__ = "Benjamin Althues"
__copyright__ = "Copyright (C) 2015  Benjamin Althues"
__version_info__ = (0, 1, 0, 'alpha', 0)
__version__ = '0.1.0'

defaultconfig = '''
log-file:       ~/.tagfile/tagfile.log
load-bar:       yes
ignore:         ['.git', '.hg', '.svn', '.pyc', '__pycache__', '.virtualenv']
hash-algo:      sha1
hash-buf-size:  1024
'''

config = yaml.load(defaultconfig)

# Set base path and initially create config and data files
BASE_PATH = os.path.expanduser('~/.tagfile')

# initialize data path
if not os.path.exists(BASE_PATH):
    os.mkdir(BASE_PATH)
    fn = os.path.join(BASE_PATH, 'config.yaml')
    with open(fn, 'w') as f:
        f.write(defaultconfig[1:])
    print(colors.green('Created config file in {}\n'.format(fn)))

# Read from default user config file
fn = os.path.join(BASE_PATH, 'config.yaml')
if os.path.exists(fn):
    config.update(yaml.load(open(fn).read()))

# Init sqlite database - used in peewee models
DB = pw.SqliteDatabase(os.path.join(BASE_PATH, 'index.db'))


class Index(pw.Model):
    '''Database model for peewee ORM'''
    filehash = pw.CharField()
    filepath = pw.CharField()
    basename = pw.CharField()

    class Meta:
        database = DB


class Files:
    '''Filesystem functions'''
    @staticmethod
    def walkdir(directory):
        paths = []
        for root, directories, files in os.walk(os.path.expanduser(directory)):
            for filename in files:
                filepath = os.path.join(root, filename)
                paths.append(filepath)
        return paths

    @staticmethod
    def hashfile(filepath):
        if config['hash-algo'] == 'md5':
            h = hashlib.md5()
        elif config['hash-algo'] == 'sha1':
            h = hashlib.sha1()
        else:
            raise Exception('Invalid "hash-algo" in configuration')

        with open(filepath, 'rb') as f:
            while True:
                data = f.read(config['hash-buf-size'])
                if not data:
                    break
                h.update(data)
        return h.hexdigest()


class TagFile:
    '''find, index and tag your files and find multiple copies'''
    def __init__(self):
        DB.connect()
        if not Index.table_exists():
            DB.create_tables([Index])
        self.paths = []

    def addPath(self, path):
        '''Walk path and add all found files'''
        self.paths.extend(Files.walkdir(path))
        return self

    def find(self, substring):
        res = Index.select().where(Index.basename.contains(substring))
        for i in res:
            print(i.filepath)

    def scan(self):
        '''Check if filepaths are in database, otherwise hash file and save'''
        iall = 0
        inew = 0
        iignore = 0
        total = len(self.paths)
        try:
            for path in self.paths:
                file_is_valid = True
                iall += 1
                if config['load-bar']:
                    sys.stdout.write('\r  {} / {}'.format(iall, total))

                for ignorepatt in config['ignore']:
                    if ignorepatt in path:
                        file_is_valid = False
                        iignore += 1
                        logging.debug('Ignored ' + path)

                if file_is_valid:
                    try:
                        Index.get(Index.filepath == path)
                    except Index.DoesNotExist:
                        inew += 1
                        Index.create(
                            filehash=Files.hashfile(path), filepath=path,
                            basename=os.path.basename(path)
                        )
                        logging.debug('Added ' + path)
        finally:
            if inew:
                print(colors.green('\rAdded {} new files'.format(inew)))
            if iignore:
                print(colors.cyan('\rIgnored {} files'.format(iignore)))
            if not inew and not iignore:
                print('\r                         ')
        return self


class Command(pycommand.CommandBase):
    '''Argument handler based on pycommand'''
    usagestr = 'Usage: tagfile <options>'
    description = TagFile.__doc__
    optionList = (
        ('help', ('h', False, 'show this help information')),
        ('scan', ('s', False, 'scan pwd and update index')),
        ('find', ('f', '<string>', 'find all filenames for <string>')),
        ('version', ('V', False, 'show version information')),
        ('config', ('F', '<filename>', 'use specified config file')),
    )

    def run(self):
        '''Run from shell; main application program flow.'''

        # Flags that will print and exit
        if self.flags['help']:
            print(self.usage)
            return
        elif self.flags['version']:
            print('Python version ' + sys.version.split()[0])
            return

        # Update config with file
        if self.flags['config']:
            fn = self.flags['config']
            if os.path.exists(fn):
                config.update(yaml.load(open(fn).read()))
            else:
                print('ERROR: file does not exist')
                return 2

        # Setup logging
        logging.basicConfig(
            filename=os.path.expanduser(config['log-file']),
            level=logging.DEBUG, style='{',
            format='{asctime}:{levelname}: {message}'
        )

        # Setup TagFile
        tf = TagFile()
        if self.flags['scan']:
            tf.addPath(os.getcwd()).scan()
            return

        if self.flags['find']:
            tf.find(self.flags['find'])
            return

        # Show usage if there are no arguments
        if not self.args:
            print('Use "tagfile --scan" to scan "{}" for files. '
                  'See "tagfile --help" for more options'.format(os.getcwd()))
            return

if __name__ == '__main__':
    try:
        cmd = Command(sys.argv[1:])
        if cmd.error:
            print('error: {0}'.format(cmd.error))
            sys.exit(1)
        else:
            sys.exit(cmd.run())
    except KeyboardInterrupt:
        print('\nOk, well... see you later then I guess.')
