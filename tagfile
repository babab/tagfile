#!/usr/bin/env python

import hashlib
import logging
import os
import sys

import yaml
import peewee as pw
import colors


defaultconfig = '''
db-file:        example.db
log-file:       example.log
load-bar:       yes
hash-algo:      sha1
hash-buf-size:  1024
'''

config = yaml.load(defaultconfig)


if os.path.exists('config.yaml'):
    config.update(yaml.load(open('config.yaml').read()))
logging.basicConfig(
    filename=config['log-file'], level=logging.DEBUG, style='{',
    format='{asctime}:{levelname}: {message}'
)

db = pw.SqliteDatabase(config['db-file'])


class Index(pw.Model):
    filehash = pw.CharField()
    filename = pw.CharField()

    class Meta:
        database = db


class Files:
    @staticmethod
    def walkdir(directory):
        paths = []
        for root, directories, files in os.walk(os.path.expanduser(directory)):
            for filename in files:
                filepath = os.path.join(root, filename)
                paths.append(filepath)
        return paths

    @staticmethod
    def hashfile(filepath):
        if config['hash-algo'] == 'md5':
            h = hashlib.md5()
        elif config['hash-algo'] == 'sha1':
            h = hashlib.sha1()
        else:
            raise Exception('Invalid HASH_ALGO in configuration')

        with open(filepath, 'rb') as f:
            while True:
                data = f.read(config['hash-buf-size'])
                if not data:
                    break
                h.update(data)
        return h.hexdigest()


class TagFile:
    def __init__(self):
        db.connect()

        if not Index.table_exists():
            db.create_tables([Index])

        self.paths = []

    def addPath(self, path):
        self.paths.extend(Files.walkdir(path))

    def scan(self):
        iall = 0
        inew = 0
        total = len(self.paths)
        for path in self.paths:
            iall += 1
            if config['load-bar']:
                sys.stdout.write('\r  {} / {}'.format(iall, total))
            try:
                Index.get(filename=path)
            except Index.DoesNotExist:
                inew += 1
                Index.create(filehash=Files.hashfile(path), filename=path)
        print(colors.green('\rAdded {} new files'.format(inew)))


if __name__ == '__main__':
    try:
        main = TagFile()
        main.addPath('~/Desktop')
        main.scan()
    except KeyboardInterrupt:
        print('\nOk, well...see you later then I guess.')
